// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.8
// Revision: 3d844c8ecc59661ed7aa17bfd65727bc06a60ad8
// Build Date: 2023-09-18T14:55:21Z
// Built By: goreleaser

package chat

import (
	"fmt"
	"strings"
)

const (
	// OutputTable is a Output of type Table.
	OutputTable Output = iota
	// OutputJson is a Output of type Json.
	OutputJson
)

var ErrInvalidOutput = fmt.Errorf("not a valid Output, try [%s]", strings.Join(_OutputNames, ", "))

const _OutputName = "tablejson"

var _OutputNames = []string{
	_OutputName[0:5],
	_OutputName[5:9],
}

// OutputNames returns a list of possible string values of Output.
func OutputNames() []string {
	tmp := make([]string, len(_OutputNames))
	copy(tmp, _OutputNames)
	return tmp
}

// OutputValues returns a list of the values for Output
func OutputValues() []Output {
	return []Output{
		OutputTable,
		OutputJson,
	}
}

var _OutputMap = map[Output]string{
	OutputTable: _OutputName[0:5],
	OutputJson:  _OutputName[5:9],
}

// String implements the Stringer interface.
func (x Output) String() string {
	if str, ok := _OutputMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Output(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Output) IsValid() bool {
	_, ok := _OutputMap[x]
	return ok
}

var _OutputValue = map[string]Output{
	_OutputName[0:5]: OutputTable,
	_OutputName[5:9]: OutputJson,
}

// ParseOutput attempts to convert a string to a Output.
func ParseOutput(name string) (Output, error) {
	if x, ok := _OutputValue[name]; ok {
		return x, nil
	}
	return Output(0), fmt.Errorf("%s is %w", name, ErrInvalidOutput)
}

// Set implements the Golang flag.Value interface func.
func (x *Output) Set(val string) error {
	v, err := ParseOutput(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Output) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Output) Type() string {
	return "Output"
}
